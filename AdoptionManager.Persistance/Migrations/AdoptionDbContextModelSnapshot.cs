// <auto-generated />
using System;
using AdoptionManager.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AdoptionManager.Persistance.Migrations
{
    [DbContext(typeof(AdoptionDbContext))]
    partial class AdoptionDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AdoptionManager.Domain.Entities.Animals.AdoptionOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnimalId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int>("QuatntityInStock")
                        .HasColumnType("integer");

                    b.Property<int>("ResidenceAddressId")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int>("SurveyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ResidenceAddressId");

                    b.HasIndex("SurveyId");

                    b.ToTable("AdoptionOffers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnimalId = 1,
                            Created = new DateTime(2023, 8, 18, 15, 19, 15, 6, DateTimeKind.Utc).AddTicks(9439),
                            CreatedBy = "lab.rescue.adopcje@gmail.com",
                            Description = "Zwierzęta z nadwyżki hodowlanej, lub po nieinwazyjnych testach",
                            OrganizationId = 1,
                            QuatntityInStock = 30,
                            ResidenceAddressId = 1,
                            StatusId = 0,
                            SurveyId = 1
                        },
                        new
                        {
                            Id = 2,
                            AnimalId = 2,
                            Created = new DateTime(2023, 8, 18, 15, 19, 15, 6, DateTimeKind.Utc).AddTicks(9441),
                            CreatedBy = "kalipso@seed.com",
                            Description = "Koty znalezione na ulicy",
                            OrganizationId = 2,
                            QuatntityInStock = 2,
                            ResidenceAddressId = 2,
                            StatusId = 0,
                            SurveyId = 2
                        });
                });

            modelBuilder.Entity("AdoptionManager.Domain.Entities.Animals.Animal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Animals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateOnly(2022, 10, 18),
                            Created = new DateTime(2023, 8, 18, 15, 19, 15, 6, DateTimeKind.Utc).AddTicks(9316),
                            CreatedBy = "lab.rescue.adopcje@gmail.com",
                            Name = "Szczur Wistar",
                            Species = "Szczur",
                            StatusId = 0
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateOnly(2020, 8, 18),
                            Created = new DateTime(2023, 8, 18, 15, 19, 15, 6, DateTimeKind.Utc).AddTicks(9322),
                            CreatedBy = "kalipso@seed.com",
                            Name = "Ragdoll",
                            Species = "Kot",
                            StatusId = 0
                        });
                });

            modelBuilder.Entity("AdoptionManager.Domain.Entities.Animals.AnimalCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("AnimalCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Laboratoryjne",
                            Created = new DateTime(2023, 8, 18, 15, 19, 15, 6, DateTimeKind.Utc).AddTicks(9476),
                            CreatedBy = "charlie.b@test.com",
                            StatusId = 0
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Domowe",
                            Created = new DateTime(2023, 8, 18, 15, 19, 15, 6, DateTimeKind.Utc).AddTicks(9477),
                            CreatedBy = "charlie.b@test.com",
                            StatusId = 0
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Szczury laboratoryjne",
                            Created = new DateTime(2023, 8, 18, 15, 19, 15, 6, DateTimeKind.Utc).AddTicks(9478),
                            CreatedBy = "milva.b@test.com",
                            ParentCategoryId = 1,
                            StatusId = 0
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Gryzonie",
                            Created = new DateTime(2023, 8, 18, 15, 19, 15, 6, DateTimeKind.Utc).AddTicks(9479),
                            CreatedBy = "milva.b@test.com",
                            StatusId = 0
                        });
                });

            modelBuilder.Entity("AdoptionManager.Domain.Entities.Product.AdoptionApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int>("ShippingId")
                        .HasColumnType("integer");

                    b.Property<int>("SiteUserId")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ShippingId");

                    b.HasIndex("SiteUserId");

                    b.ToTable("ApplicationApplications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationStatus = 2,
                            Created = new DateTime(2023, 8, 18, 15, 19, 15, 6, DateTimeKind.Utc).AddTicks(9459),
                            CreatedBy = "sam.w@test.com",
                            OrderDate = new DateTime(2023, 8, 18, 15, 19, 15, 6, DateTimeKind.Utc).AddTicks(9459),
                            OrganizationId = 1,
                            ShippingId = 1,
                            SiteUserId = 3,
                            StatusId = 0
                        },
                        new
                        {
                            Id = 2,
                            ApplicationStatus = 3,
                            Created = new DateTime(2023, 8, 18, 15, 19, 15, 6, DateTimeKind.Utc).AddTicks(9461),
                            CreatedBy = "dean.w@test.com",
                            OrderDate = new DateTime(2023, 8, 18, 15, 19, 15, 6, DateTimeKind.Utc).AddTicks(9461),
                            OrganizationId = 2,
                            ShippingId = 2,
                            SiteUserId = 4,
                            StatusId = 0
                        });
                });

            modelBuilder.Entity("AdoptionManager.Domain.Entities.Shipping.ShippingData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("ShipmentAddressId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ShipmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ShipmentMethodId")
                        .HasColumnType("integer");

                    b.Property<int>("ShipmentStatus")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ShipmentAddressId");

                    b.HasIndex("ShipmentMethodId");

                    b.ToTable("Shippings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2023, 8, 18, 15, 19, 15, 23, DateTimeKind.Utc).AddTicks(4146),
                            CreatedBy = "lab.rescue.adopcje@gmail.com",
                            ShipmentAddressId = 3,
                            ShipmentDate = new DateTime(2023, 8, 28, 15, 19, 15, 23, DateTimeKind.Utc).AddTicks(4138),
                            ShipmentMethodId = 1,
                            ShipmentStatus = 2,
                            StatusId = 0
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2023, 8, 18, 15, 19, 15, 23, DateTimeKind.Utc).AddTicks(4148),
                            CreatedBy = "kalipso@seed.com",
                            ShipmentAddressId = 4,
                            ShipmentDate = new DateTime(2023, 9, 2, 15, 19, 15, 23, DateTimeKind.Utc).AddTicks(4147),
                            ShipmentMethodId = 2,
                            ShipmentStatus = 3,
                            StatusId = 0
                        });
                });

            modelBuilder.Entity("AdoptionManager.Domain.Entities.Shipping.ShippingMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int>("ShippingType")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("ShippingMethods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2023, 8, 18, 15, 19, 15, 23, DateTimeKind.Utc).AddTicks(4179),
                            CreatedBy = "lab.rescue.adopcje@gmail.com",
                            Description = "Klient odbiera zwierzęta samodzielnie z domu tymczasowego",
                            OrganizationId = 1,
                            ShippingType = 1,
                            StatusId = 0
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2023, 8, 18, 15, 19, 15, 23, DateTimeKind.Utc).AddTicks(4181),
                            CreatedBy = "kalipso@seed.com",
                            Description = "Wolontariusz przekazuje zwierzaka klientowi",
                            OrganizationId = 2,
                            ShippingType = 2,
                            StatusId = 0
                        });
                });

            modelBuilder.Entity("AdoptionManager.Domain.Entities.Surveys.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserResponseId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserResponseId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2023, 8, 18, 15, 19, 15, 23, DateTimeKind.Utc).AddTicks(4258),
                            CreatedBy = "sam.w@test.com",
                            QuestionId = 1,
                            StatusId = 0,
                            Text = "Tak, kota",
                            UserResponseId = 1
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2023, 8, 18, 15, 19, 15, 23, DateTimeKind.Utc).AddTicks(4259),
                            CreatedBy = "dean.w@test.com",
                            QuestionId = 2,
                            StatusId = 0,
                            Text = "U rodziców",
                            UserResponseId = 2
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2023, 8, 18, 15, 19, 15, 23, DateTimeKind.Utc).AddTicks(4260),
                            CreatedBy = "sam.w@test.com",
                            QuestionId = 3,
                            StatusId = 0,
                            Text = "Tak, kota",
                            UserResponseId = 1
                        });
                });

            modelBuilder.Entity("AdoptionManager.Domain.Entities.Surveys.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int>("SurveyId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2023, 8, 18, 15, 19, 15, 23, DateTimeKind.Utc).AddTicks(4235),
                            CreatedBy = "lab.rescue.adopcje@gmail.com",
                            StatusId = 0,
                            SurveyId = 1,
                            Text = "Czy posiadasz już jakies zwierzęta?"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2023, 8, 18, 15, 19, 15, 23, DateTimeKind.Utc).AddTicks(4236),
                            CreatedBy = "kalipso@seed.com",
                            StatusId = 0,
                            SurveyId = 2,
                            Text = "Gdzie zwierzę będzie przebywało w czasie urlopu/wakacji?"
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2023, 8, 18, 15, 19, 15, 23, DateTimeKind.Utc).AddTicks(4237),
                            CreatedBy = "lab.rescue.adopcje@gmail.com",
                            StatusId = 0,
                            SurveyId = 1,
                            Text = "Jakie wymiary będzie miała klatka?"
                        });
                });

            modelBuilder.Entity("AdoptionManager.Domain.Entities.Surveys.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Surveys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2023, 8, 18, 15, 19, 15, 23, DateTimeKind.Utc).AddTicks(4209),
                            CreatedBy = "lab.rescue.adopcje@gmail.com",
                            Description = "Ankieta adopcji szczurów laboratoryjnych",
                            StatusId = 0,
                            Title = "Szczury laboratoryjne"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2023, 8, 18, 15, 19, 15, 23, DateTimeKind.Utc).AddTicks(4211),
                            CreatedBy = "kalipso@seed.com",
                            Description = "Ankieta adopcji kotów",
                            StatusId = 0,
                            Title = "Koty"
                        });
                });

            modelBuilder.Entity("AdoptionManager.Domain.Entities.Surveys.UserResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Accepted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("SiteUserId")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int>("SurveyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SiteUserId");

                    b.HasIndex("SurveyId");

                    b.ToTable("UserResponses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2023, 8, 18, 15, 19, 15, 23, DateTimeKind.Utc).AddTicks(4280),
                            CreatedBy = "sam.w@test.com",
                            SiteUserId = 3,
                            StatusId = 0,
                            SurveyId = 1
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2023, 8, 18, 15, 19, 15, 23, DateTimeKind.Utc).AddTicks(4282),
                            CreatedBy = "dean.w@test.com",
                            SiteUserId = 4,
                            StatusId = 0,
                            SurveyId = 2
                        });
                });

            modelBuilder.Entity("AdoptionManager.Domain.Entities.Users.Addresses.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Address");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AdoptionManager.Domain.Entities.Users.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("text");

                    b.Property<int?>("KRS")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int?>("NIP")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Phone")
                        .HasColumnType("integer");

                    b.Property<int?>("REGON")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2023, 8, 18, 15, 19, 15, 7, DateTimeKind.Utc).AddTicks(395),
                            CreatedBy = "lab.rescue.adopcje@gmail.com",
                            Description = "Jedyna w Polsce organizacja zajmująca się adopcją zwierząt laboratoryjnych",
                            Name = "LabResque",
                            StatusId = 0
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2023, 8, 18, 15, 19, 15, 7, DateTimeKind.Utc).AddTicks(397),
                            CreatedBy = "kalipso@seed.com",
                            Description = "Organizacja zajmująca się adopcją zwierząt domowych",
                            Name = "Kalipso",
                            Phone = 777777777,
                            StatusId = 0
                        });
                });

            modelBuilder.Entity("AdoptionManager.Domain.Entities.Users.SiteUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int?>("Phone")
                        .HasColumnType("integer");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("SiteUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2023, 8, 18, 15, 19, 15, 7, DateTimeKind.Utc).AddTicks(603),
                            CreatedBy = "seeder",
                            Role = 1,
                            StatusId = 0
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2023, 8, 18, 15, 19, 15, 7, DateTimeKind.Utc).AddTicks(604),
                            CreatedBy = "seeder",
                            Phone = 0,
                            Role = 1,
                            StatusId = 0
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2023, 8, 18, 15, 19, 15, 7, DateTimeKind.Utc).AddTicks(606),
                            CreatedBy = "sam.w@test.com",
                            Phone = 111111111,
                            Role = 2,
                            StatusId = 0
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2023, 8, 18, 15, 19, 15, 7, DateTimeKind.Utc).AddTicks(607),
                            CreatedBy = "dean.w@test.com",
                            Phone = 222222222,
                            Role = 2,
                            StatusId = 0
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "jack.k@test.com",
                            Phone = 333333333,
                            Role = 2,
                            StatusId = 0
                        });
                });

            modelBuilder.Entity("AdoptionOfferAnimalCategory", b =>
                {
                    b.Property<int>("AdoptionOffersId")
                        .HasColumnType("integer");

                    b.Property<int>("AnimalCategoriesId")
                        .HasColumnType("integer");

                    b.HasKey("AdoptionOffersId", "AnimalCategoriesId");

                    b.HasIndex("AnimalCategoriesId");

                    b.ToTable("AdoptionOfferAnimalCategory");

                    b.HasData(
                        new
                        {
                            AdoptionOffersId = 1,
                            AnimalCategoriesId = 3
                        },
                        new
                        {
                            AdoptionOffersId = 1,
                            AnimalCategoriesId = 4
                        },
                        new
                        {
                            AdoptionOffersId = 2,
                            AnimalCategoriesId = 2
                        });
                });

            modelBuilder.Entity("AdoptionManager.Domain.Entities.Users.Addresses.OrganizationAddress", b =>
                {
                    b.HasBaseType("AdoptionManager.Domain.Entities.Users.Addresses.Address");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.HasIndex("OrganizationId");

                    b.HasDiscriminator().HasValue("OrganizationAddress");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2023, 8, 18, 15, 19, 15, 8, DateTimeKind.Utc).AddTicks(531),
                            CreatedBy = "lab.rescue.adopcje@gmail.com",
                            IsDefault = false,
                            StatusId = 0,
                            OrganizationId = 1
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2023, 8, 18, 15, 19, 15, 8, DateTimeKind.Utc).AddTicks(532),
                            CreatedBy = "kalipso@seed.com",
                            IsDefault = false,
                            StatusId = 0,
                            OrganizationId = 2
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(2023, 8, 18, 15, 19, 15, 8, DateTimeKind.Utc).AddTicks(533),
                            CreatedBy = "lab.rescue.adopcje@gmail.com",
                            IsDefault = true,
                            StatusId = 0,
                            OrganizationId = 1
                        },
                        new
                        {
                            Id = 6,
                            Created = new DateTime(2023, 8, 18, 15, 19, 15, 8, DateTimeKind.Utc).AddTicks(534),
                            CreatedBy = "kalipso@seed.com",
                            IsDefault = true,
                            StatusId = 0,
                            OrganizationId = 2
                        });
                });

            modelBuilder.Entity("AdoptionManager.Domain.Entities.Users.Addresses.SiteUserAddress", b =>
                {
                    b.HasBaseType("AdoptionManager.Domain.Entities.Users.Addresses.Address");

                    b.Property<int>("SiteUserId")
                        .HasColumnType("integer");

                    b.HasIndex("SiteUserId");

                    b.HasDiscriminator().HasValue("SiteUserAddress");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2023, 8, 18, 15, 19, 15, 16, DateTimeKind.Utc).AddTicks(8337),
                            CreatedBy = "sam.w@test.com",
                            IsDefault = false,
                            StatusId = 0,
                            SiteUserId = 3
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2023, 8, 18, 15, 19, 15, 16, DateTimeKind.Utc).AddTicks(8340),
                            CreatedBy = "dean.w@test.com",
                            IsDefault = false,
                            StatusId = 0,
                            SiteUserId = 4
                        });
                });

            modelBuilder.Entity("AdoptionManager.Domain.Entities.Animals.AdoptionOffer", b =>
                {
                    b.HasOne("AdoptionManager.Domain.Entities.Animals.Animal", "Animal")
                        .WithMany()
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdoptionManager.Domain.Entities.Users.Organization", "Organization")
                        .WithMany("AdoptionOffers")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdoptionManager.Domain.Entities.Users.Addresses.OrganizationAddress", "ResidenceAddress")
                        .WithMany()
                        .HasForeignKey("ResidenceAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdoptionManager.Domain.Entities.Surveys.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Organization");

                    b.Navigation("ResidenceAddress");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("AdoptionManager.Domain.Entities.Animals.AnimalCategory", b =>
                {
                    b.HasOne("AdoptionManager.Domain.Entities.Animals.AnimalCategory", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("AdoptionManager.Domain.Entities.Product.AdoptionApplication", b =>
                {
                    b.HasOne("AdoptionManager.Domain.Entities.Users.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdoptionManager.Domain.Entities.Shipping.ShippingData", "Shipping")
                        .WithMany()
                        .HasForeignKey("ShippingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdoptionManager.Domain.Entities.Users.SiteUser", "SiteUser")
                        .WithMany("AdoptionApplications")
                        .HasForeignKey("SiteUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Shipping");

                    b.Navigation("SiteUser");
                });

            modelBuilder.Entity("AdoptionManager.Domain.Entities.Shipping.ShippingData", b =>
                {
                    b.HasOne("AdoptionManager.Domain.Entities.Users.Addresses.SiteUserAddress", "ShipmentAddress")
                        .WithMany()
                        .HasForeignKey("ShipmentAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdoptionManager.Domain.Entities.Shipping.ShippingMethod", "ShipmentMethod")
                        .WithMany()
                        .HasForeignKey("ShipmentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShipmentAddress");

                    b.Navigation("ShipmentMethod");
                });

            modelBuilder.Entity("AdoptionManager.Domain.Entities.Shipping.ShippingMethod", b =>
                {
                    b.HasOne("AdoptionManager.Domain.Entities.Users.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("AdoptionManager.Domain.Entities.Surveys.Answer", b =>
                {
                    b.HasOne("AdoptionManager.Domain.Entities.Surveys.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdoptionManager.Domain.Entities.Surveys.UserResponse", "UserResponse")
                        .WithMany("UserAnswers")
                        .HasForeignKey("UserResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("UserResponse");
                });

            modelBuilder.Entity("AdoptionManager.Domain.Entities.Surveys.Question", b =>
                {
                    b.HasOne("AdoptionManager.Domain.Entities.Surveys.Survey", "Survey")
                        .WithMany("Questions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("AdoptionManager.Domain.Entities.Surveys.UserResponse", b =>
                {
                    b.HasOne("AdoptionManager.Domain.Entities.Users.SiteUser", "SiteUser")
                        .WithMany("UserResponses")
                        .HasForeignKey("SiteUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdoptionManager.Domain.Entities.Surveys.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SiteUser");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("AdoptionManager.Domain.Entities.Users.Organization", b =>
                {
                    b.OwnsOne("AdoptionManager.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<int>("OrganizationId")
                                .HasColumnType("integer");

                            b1.Property<string>("DomainName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("UserName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("OrganizationId");

                            b1.HasIndex("UserName", "DomainName")
                                .IsUnique();

                            b1.ToTable("Organizations");

                            b1.WithOwner()
                                .HasForeignKey("OrganizationId");

                            b1.HasData(
                                new
                                {
                                    OrganizationId = 1,
                                    DomainName = "gmail.com",
                                    UserName = "lab.rescue.adopcje"
                                },
                                new
                                {
                                    OrganizationId = 2,
                                    DomainName = "seed.com",
                                    UserName = "kalipso"
                                });
                        });

                    b.Navigation("Email")
                        .IsRequired();
                });

            modelBuilder.Entity("AdoptionManager.Domain.Entities.Users.SiteUser", b =>
                {
                    b.OwnsOne("AdoptionManager.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<int>("SiteUserId")
                                .HasColumnType("integer");

                            b1.Property<string>("DomainName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("UserName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("SiteUserId");

                            b1.HasIndex("UserName", "DomainName")
                                .IsUnique();

                            b1.ToTable("SiteUsers");

                            b1.WithOwner()
                                .HasForeignKey("SiteUserId");

                            b1.HasData(
                                new
                                {
                                    SiteUserId = 1,
                                    DomainName = "test.com",
                                    UserName = "charlie.b"
                                },
                                new
                                {
                                    SiteUserId = 2,
                                    DomainName = "test.com",
                                    UserName = "milva.b"
                                },
                                new
                                {
                                    SiteUserId = 3,
                                    DomainName = "test.com",
                                    UserName = "sam.w"
                                },
                                new
                                {
                                    SiteUserId = 4,
                                    DomainName = "test.com",
                                    UserName = "dean.w"
                                },
                                new
                                {
                                    SiteUserId = 5,
                                    DomainName = "test.com",
                                    UserName = "jack.k"
                                });
                        });

                    b.OwnsOne("AdoptionManager.Domain.ValueObjects.SiteUserName", "SiteUserName", b1 =>
                        {
                            b1.Property<int>("SiteUserId")
                                .HasColumnType("integer");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("SiteUserId");

                            b1.ToTable("SiteUsers");

                            b1.WithOwner()
                                .HasForeignKey("SiteUserId");

                            b1.HasData(
                                new
                                {
                                    SiteUserId = 1,
                                    FirstName = "Charlie",
                                    LastName = "Bradbury"
                                },
                                new
                                {
                                    SiteUserId = 2,
                                    FirstName = "Milva",
                                    LastName = "Barring"
                                },
                                new
                                {
                                    SiteUserId = 3,
                                    FirstName = "Sam",
                                    LastName = "Winchester"
                                },
                                new
                                {
                                    SiteUserId = 4,
                                    FirstName = "Dean",
                                    LastName = "Winchester"
                                },
                                new
                                {
                                    SiteUserId = 5,
                                    FirstName = "Jack",
                                    LastName = "Kline"
                                });
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("SiteUserName")
                        .IsRequired();
                });

            modelBuilder.Entity("AdoptionOfferAnimalCategory", b =>
                {
                    b.HasOne("AdoptionManager.Domain.Entities.Animals.AdoptionOffer", null)
                        .WithMany()
                        .HasForeignKey("AdoptionOffersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdoptionManager.Domain.Entities.Animals.AnimalCategory", null)
                        .WithMany()
                        .HasForeignKey("AnimalCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdoptionManager.Domain.Entities.Users.Addresses.OrganizationAddress", b =>
                {
                    b.HasOne("AdoptionManager.Domain.Entities.Users.Organization", "Organization")
                        .WithMany("OrganizationAddresses")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("AdoptionManager.Domain.ValueObjects.AddressObj", "AddressObj", b1 =>
                        {
                            b1.Property<int>("OrganizationAddressId")
                                .HasColumnType("integer");

                            b1.Property<string>("ApartmentNumber")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text");

                            b1.Property<string>("BuildingNumber")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text");

                            b1.Property<string>("City")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text");

                            b1.Property<string>("StreetName")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text");

                            b1.HasKey("OrganizationAddressId");

                            b1.ToTable("Addresses");

                            b1.WithOwner()
                                .HasForeignKey("OrganizationAddressId");

                            b1.HasData(
                                new
                                {
                                    OrganizationAddressId = 1,
                                    ApartmentNumber = "1",
                                    BuildingNumber = "1",
                                    City = "Gdańsk",
                                    Country = "Polska",
                                    StreetName = "Ulica1",
                                    ZipCode = "11-111"
                                },
                                new
                                {
                                    OrganizationAddressId = 2,
                                    ApartmentNumber = "2",
                                    BuildingNumber = "2",
                                    City = "Gdynia",
                                    Country = "Polska",
                                    StreetName = "Ulica2",
                                    ZipCode = "22-222"
                                },
                                new
                                {
                                    OrganizationAddressId = 5,
                                    ApartmentNumber = "5",
                                    BuildingNumber = "5",
                                    City = "Sopot",
                                    Country = "Polska",
                                    StreetName = "Ulica5",
                                    ZipCode = "55-555"
                                },
                                new
                                {
                                    OrganizationAddressId = 6,
                                    ApartmentNumber = "6",
                                    BuildingNumber = "6",
                                    City = "Malbork",
                                    Country = "Polska",
                                    StreetName = "Ulica6",
                                    ZipCode = "66-666"
                                });
                        });

                    b.Navigation("AddressObj")
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("AdoptionManager.Domain.Entities.Users.Addresses.SiteUserAddress", b =>
                {
                    b.HasOne("AdoptionManager.Domain.Entities.Users.SiteUser", "SiteUser")
                        .WithMany("SiteUserAddresses")
                        .HasForeignKey("SiteUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("AdoptionManager.Domain.ValueObjects.AddressObj", "AddressObj", b1 =>
                        {
                            b1.Property<int>("SiteUserAddressId")
                                .HasColumnType("integer");

                            b1.Property<string>("ApartmentNumber")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text");

                            b1.Property<string>("BuildingNumber")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text");

                            b1.Property<string>("City")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text");

                            b1.Property<string>("StreetName")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text");

                            b1.HasKey("SiteUserAddressId");

                            b1.ToTable("Addresses");

                            b1.WithOwner()
                                .HasForeignKey("SiteUserAddressId");

                            b1.HasData(
                                new
                                {
                                    SiteUserAddressId = 3,
                                    ApartmentNumber = "3",
                                    BuildingNumber = "3",
                                    City = "Ciechanowiec",
                                    Country = "Polska",
                                    StreetName = "Ulica3",
                                    ZipCode = "33-333"
                                },
                                new
                                {
                                    SiteUserAddressId = 4,
                                    ApartmentNumber = "4",
                                    BuildingNumber = "4",
                                    City = "Warszawa",
                                    Country = "Polska",
                                    StreetName = "Ulica4",
                                    ZipCode = "44-444"
                                });
                        });

                    b.Navigation("AddressObj")
                        .IsRequired();

                    b.Navigation("SiteUser");
                });

            modelBuilder.Entity("AdoptionManager.Domain.Entities.Surveys.Survey", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("AdoptionManager.Domain.Entities.Surveys.UserResponse", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("AdoptionManager.Domain.Entities.Users.Organization", b =>
                {
                    b.Navigation("AdoptionOffers");

                    b.Navigation("OrganizationAddresses");
                });

            modelBuilder.Entity("AdoptionManager.Domain.Entities.Users.SiteUser", b =>
                {
                    b.Navigation("AdoptionApplications");

                    b.Navigation("SiteUserAddresses");

                    b.Navigation("UserResponses");
                });
#pragma warning restore 612, 618
        }
    }
}
